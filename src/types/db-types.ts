/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/board_space": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.board_space.id"];
          created_at?: parameters["rowFilter.board_space.created_at"];
          name?: parameters["rowFilter.board_space.name"];
          take_card?: parameters["rowFilter.board_space.take_card"];
          property?: parameters["rowFilter.board_space.property"];
          space_type?: parameters["rowFilter.board_space.space_type"];
          board_position?: parameters["rowFilter.board_space.board_position"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["board_space"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** board_space */
          board_space?: definitions["board_space"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.board_space.id"];
          created_at?: parameters["rowFilter.board_space.created_at"];
          name?: parameters["rowFilter.board_space.name"];
          take_card?: parameters["rowFilter.board_space.take_card"];
          property?: parameters["rowFilter.board_space.property"];
          space_type?: parameters["rowFilter.board_space.space_type"];
          board_position?: parameters["rowFilter.board_space.board_position"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.board_space.id"];
          created_at?: parameters["rowFilter.board_space.created_at"];
          name?: parameters["rowFilter.board_space.name"];
          take_card?: parameters["rowFilter.board_space.take_card"];
          property?: parameters["rowFilter.board_space.property"];
          space_type?: parameters["rowFilter.board_space.space_type"];
          board_position?: parameters["rowFilter.board_space.board_position"];
        };
        body: {
          /** board_space */
          board_space?: definitions["board_space"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/game_card": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card.id"];
          created_at?: parameters["rowFilter.game_card.created_at"];
          card_type?: parameters["rowFilter.game_card.card_type"];
          text?: parameters["rowFilter.game_card.text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game_card"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game_card */
          game_card?: definitions["game_card"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card.id"];
          created_at?: parameters["rowFilter.game_card.created_at"];
          card_type?: parameters["rowFilter.game_card.card_type"];
          text?: parameters["rowFilter.game_card.text"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card.id"];
          created_at?: parameters["rowFilter.game_card.created_at"];
          card_type?: parameters["rowFilter.game_card.card_type"];
          text?: parameters["rowFilter.game_card.text"];
        };
        body: {
          /** game_card */
          game_card?: definitions["game_card"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/game_card_action": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card_action.id"];
          created_at?: parameters["rowFilter.game_card_action.created_at"];
          cost?: parameters["rowFilter.game_card_action.cost"];
          go_to_space?: parameters["rowFilter.game_card_action.go_to_space"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game_card_action"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game_card_action */
          game_card_action?: definitions["game_card_action"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card_action.id"];
          created_at?: parameters["rowFilter.game_card_action.created_at"];
          cost?: parameters["rowFilter.game_card_action.cost"];
          go_to_space?: parameters["rowFilter.game_card_action.go_to_space"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_card_action.id"];
          created_at?: parameters["rowFilter.game_card_action.created_at"];
          cost?: parameters["rowFilter.game_card_action.cost"];
          go_to_space?: parameters["rowFilter.game_card_action.go_to_space"];
        };
        body: {
          /** game_card_action */
          game_card_action?: definitions["game_card_action"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/game_property": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_property.id"];
          name?: parameters["rowFilter.game_property.name"];
          price?: parameters["rowFilter.game_property.price"];
          rents?: parameters["rowFilter.game_property.rents"];
          property_group?: parameters["rowFilter.game_property.property_group"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game_property"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game_property */
          game_property?: definitions["game_property"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_property.id"];
          name?: parameters["rowFilter.game_property.name"];
          price?: parameters["rowFilter.game_property.price"];
          rents?: parameters["rowFilter.game_property.rents"];
          property_group?: parameters["rowFilter.game_property.property_group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game_property.id"];
          name?: parameters["rowFilter.game_property.name"];
          price?: parameters["rowFilter.game_property.price"];
          rents?: parameters["rowFilter.game_property.rents"];
          property_group?: parameters["rowFilter.game_property.property_group"];
        };
        body: {
          /** game_property */
          game_property?: definitions["game_property"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/property_group": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.property_group.id"];
          created_at?: parameters["rowFilter.property_group.created_at"];
          color?: parameters["rowFilter.property_group.color"];
          house_cost?: parameters["rowFilter.property_group.house_cost"];
          hotel_cost?: parameters["rowFilter.property_group.hotel_cost"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["property_group"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** property_group */
          property_group?: definitions["property_group"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.property_group.id"];
          created_at?: parameters["rowFilter.property_group.created_at"];
          color?: parameters["rowFilter.property_group.color"];
          house_cost?: parameters["rowFilter.property_group.house_cost"];
          hotel_cost?: parameters["rowFilter.property_group.hotel_cost"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.property_group.id"];
          created_at?: parameters["rowFilter.property_group.created_at"];
          color?: parameters["rowFilter.property_group.color"];
          house_cost?: parameters["rowFilter.property_group.house_cost"];
          hotel_cost?: parameters["rowFilter.property_group.hotel_cost"];
        };
        body: {
          /** property_group */
          property_group?: definitions["property_group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  board_space: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name: string;
    /**
     * Format: public.card_type
     * @enum {string}
     */
    take_card?: "POT_LUCK" | "OPPORTUNITY_KNOCKS";
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `game_property.id`.<fk table='game_property' column='id'/>
     */
    property?: number;
    /**
     * Format: public.space_type
     * @default property
     * @enum {string}
     */
    space_type: "property" | "take_card";
    /** Format: smallint */
    board_position: number;
  };
  game_card: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: public.card_type
     * @enum {string}
     */
    card_type: "POT_LUCK" | "OPPORTUNITY_KNOCKS";
    /** Format: text */
    text: string;
  };
  game_card_action: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: bigint */
    cost?: number;
    /** Format: smallint */
    go_to_space?: number;
  };
  game_property: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /** Format: bigint */
    price?: number;
    /** Format: ARRAY */
    rents?: unknown[];
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `property_group.id`.<fk table='property_group' column='id'/>
     */
    property_group?: number;
  };
  property_group: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    color: string;
    /** Format: bigint */
    house_cost?: number;
    /** Format: bigint */
    hotel_cost?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description board_space */
  "body.board_space": definitions["board_space"];
  /** Format: uuid */
  "rowFilter.board_space.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.board_space.created_at": string;
  /** Format: text */
  "rowFilter.board_space.name": string;
  /** Format: public.card_type */
  "rowFilter.board_space.take_card": string;
  /** Format: bigint */
  "rowFilter.board_space.property": string;
  /** Format: public.space_type */
  "rowFilter.board_space.space_type": string;
  /** Format: smallint */
  "rowFilter.board_space.board_position": string;
  /** @description game_card */
  "body.game_card": definitions["game_card"];
  /** Format: bigint */
  "rowFilter.game_card.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.game_card.created_at": string;
  /** Format: public.card_type */
  "rowFilter.game_card.card_type": string;
  /** Format: text */
  "rowFilter.game_card.text": string;
  /** @description game_card_action */
  "body.game_card_action": definitions["game_card_action"];
  /** Format: bigint */
  "rowFilter.game_card_action.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.game_card_action.created_at": string;
  /** Format: bigint */
  "rowFilter.game_card_action.cost": string;
  /** Format: smallint */
  "rowFilter.game_card_action.go_to_space": string;
  /** @description game_property */
  "body.game_property": definitions["game_property"];
  /** Format: bigint */
  "rowFilter.game_property.id": string;
  /** Format: text */
  "rowFilter.game_property.name": string;
  /** Format: bigint */
  "rowFilter.game_property.price": string;
  /** Format: ARRAY */
  "rowFilter.game_property.rents": string;
  /** Format: bigint */
  "rowFilter.game_property.property_group": string;
  /** @description property_group */
  "body.property_group": definitions["property_group"];
  /** Format: bigint */
  "rowFilter.property_group.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.property_group.created_at": string;
  /** Format: text */
  "rowFilter.property_group.color": string;
  /** Format: bigint */
  "rowFilter.property_group.house_cost": string;
  /** Format: bigint */
  "rowFilter.property_group.hotel_cost": string;
}

export interface operations {}

export interface external {}
