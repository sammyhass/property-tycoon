generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BoardSpace {
  board_position Int           @default(0)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  take_card      CardType?
  space_type     SpaceType     @default(PROPERTY)
  game_id        String        @db.Uuid
  Game           Game          @relation(fields: [game_id], references: [id], onDelete: Cascade)
  property_id       String?       @unique @db.Uuid
  Property   GameProperty? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locked        Boolean     @default(false)

  @@id([game_id, board_position])
  @@unique([board_position, game_id])
  @@index([board_position, game_id])
}

model Game {
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  name           String
  active         Boolean?         @unique
  user_id        String           @db.Uuid
  id             String           @id @db.Uuid @default(uuid())
  User           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  BoardSpaces     BoardSpace[]
  CardActions CardAction[]
  Properties  GameProperty[]
  PropertyGroups  PropertyGroup[]

  @@unique([id, user_id])
}

model CardAction {
  id           String           @id @default(uuid()) @db.Uuid
  created_at   DateTime?        @default(now()) @db.Timestamptz(6)
  cost         Int?             @default(0)
  game_id      String           @db.Uuid
  action_type  CardActionType @default(GO_TO_GO)
  description  String
  property_id     String?          @db.Uuid
  type         CardType
  title        String
  Game         Game             @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  GameProperty GameProperty?    @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model GameProperty {
  id                   String               @id  @db.Uuid @default(uuid())
  name                 String
  price                Int?                 @default(0)
  property_group_color PropertyGroupColor
  game_id              String               @db.Uuid
  Game                 Game                 @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PropertyGroup        PropertyGroup        @relation(fields: [property_group_color, game_id], references: [color, game_id], onDelete: NoAction, onUpdate: NoAction)
  BoardSpace           BoardSpace?
  CardActions       CardAction[]

  rent_unimproved   Int
  rent_one_house    Int
  rent_two_house    Int
  rent_three_house  Int
  rent_four_house   Int
  rent_hotel        Int
}

model PropertyGroup {
  created_at   DateTime?            @default(now()) @db.Timestamptz(6)
  house_cost   Int?
  hotel_cost   Int?
  color        PropertyGroupColor @default(NONE)
  game_id      String               @db.Uuid
  Game         Game                 @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Properties GameProperty[]

  @@id([color, game_id])
  @@unique([color, game_id])
}

model User {
  id    String @id @db.Uuid
  email String @unique
  Games  Game[]
}

enum CardType {
  POT_LUCK
  OPPORTUNITY_KNOCKS
}

enum SpaceType {
  EMPTY
  PROPERTY
  TAKE_CARD
  GO
  GO_TO_JAIL
  JUST_VISIT
  FREE_PARKING
}

enum CardActionType {
  PAY_PLAYER
  PAY_BANK
  PAY_ALL_PLAYERS
  GO_TO_JAIL
  GO_TO_GO
  GO_TO_PROPERTY
  EARN_FROM_BANK
  EARN_FROM_PLAYER
}

enum PropertyGroupColor {
  NONE
  BLUE
  GREEN
  RED
  YELLOW
  TEAL
  PURPLE
  PINK
  ORANGE
  GREY
}
