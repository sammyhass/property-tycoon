generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// BoardSpace represents a space in the game board. This could be a property, or could be an action like taking a card.
// The correct board space to render may be inferred from its space_type, which is an enum, SpaceType
model BoardSpace {
  board_position Int           @default(0)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  take_card      CardType?
  space_type     SpaceType     @default(PROPERTY)
  game_id        String        @db.Uuid
  Game           Game          @relation(fields: [game_id], references: [id], onDelete: Cascade)
  property_id       String?       @unique @db.Uuid
  Property   GameProperty? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locked        Boolean     @default(false)

  @@id([game_id, board_position])
  @@unique([board_position, game_id])
  @@index([board_position, game_id])
}

// Game represents a gameboard in our game. Each gameboard consists of a collection of board spaces, a collection of card actions, and a collection of properties.
// we use this approach so that our board can be heavily customized as the user sees fit.
model Game {
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  name           String
  active         Boolean?         @unique
  user_id        String           @db.Uuid
  id             String           @id @db.Uuid @default(uuid())
  User           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  share_code      String?           @unique

  BoardSpaces     BoardSpace[]
  CardActions CardAction[]
  Properties  GameProperty[]
  PropertyGroups  PropertyGroup[]

  @@unique([id, user_id])
}

// CardAction essentially represents a Card in the board game. The nature of this action can be inferred from its action_type, the CardActionType enum. 
// The correct card to render may be inferred from its card_type, which is an enum, CardType
model CardAction {
  id           String           @id @default(uuid()) @db.Uuid
  created_at   DateTime?        @default(now()) @db.Timestamptz(6)
  cost         Int?             @default(0)
  game_id      String           @db.Uuid
  action_type  CardActionType @default(GO_TO_GO)
  description  String
  property_id     String?          @db.Uuid
  type         CardType
  title        String
  Game         Game             @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  GameProperty GameProperty?    @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// GameProperty represents a property belonging to a game. It's required that a property exists as part of a property group.
model GameProperty {
  id                   String               @id  @db.Uuid @default(uuid())
  name                 String
  price                Int?                 @default(0)
  property_group_color PropertyGroupColor
  game_id              String               @db.Uuid
  Game                 Game                 @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PropertyGroup        PropertyGroup        @relation(fields: [property_group_color, game_id], references: [color, game_id], onDelete: NoAction, onUpdate: NoAction)
  BoardSpace           BoardSpace?
  CardActions       CardAction[]

  rent_unimproved   Int?
  rent_one_house    Int?
  rent_two_house    Int?
  rent_three_house  Int?
  rent_four_house   Int?
  rent_hotel        Int?

  @@unique([game_id, name])
}

// PropertyGroup represents a group of properties that are all of the same color/type for instance, the blue property group, the stations, the utilities, etc.
model PropertyGroup {
  created_at   DateTime?            @default(now()) @db.Timestamptz(6)
  house_cost   Int?
  hotel_cost   Int?
  color        PropertyGroupColor @default(NONE)
  game_id      String               @db.Uuid
  Game         Game                 @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Properties GameProperty[]

  @@id([color, game_id])
  @@unique([color, game_id])
}

// A user that can create game boards and play them.
model User {
  id    String @id @db.Uuid
  email String @unique
  Games  Game[]
}

// Different types of card the game can have.
enum CardType {
  POT_LUCK
  OPPORTUNITY_KNOCKS
}

// Different types of spaces in the game board. Important for rendering the correct board space and executing the correct action when a player lands on a space.
enum SpaceType {
  EMPTY
  PROPERTY
  TAKE_CARD
  GO
  GO_TO_JAIL
  // JUST_VISIT represents Jail and the "Just Visiting" space.
  JUST_VISIT
  FREE_PARKING
}

// Different types of card actions. Important for rendering the correct card action and executing moves in the game according the card action type.
enum CardActionType {
  PAY_PLAYER
  PAY_BANK
  PAY_ALL_PLAYERS
  GO_TO_JAIL
  GO_TO_GO
  GO_TO_PROPERTY
  EARN_FROM_BANK
  EARN_FROM_PLAYER
}

// Property group colors / types.
enum PropertyGroupColor {
  NONE
  BLUE
  UTILITIES
  GREEN
  RED
  YELLOW
  TEAL
  DEEP_BLUE
  PURPLE

  // Stations and utilities will be special groups as the rent should be calculated for them in the game.
  STATION
  PINK
  BROWN
  ORANGE
  GREY
}
